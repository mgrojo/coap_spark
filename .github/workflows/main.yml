on:                    # Run the workflow for each of the following events:
  push:                # - A branch is pushed or updated.
  pull_request:        # - A pull-request is opened or updated.
  workflow_dispatch:   # - A manual run of the workflow is requested from the GitHub web interface.
  release:
    types: [created]   # - A release is created.

jobs:
  main:
    strategy:
      
      fail-fast: false # Don't stop all the workflows when one of them fails.
    
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest] # List of GitHub Actions platform to run the workflow on

    runs-on: ${{ matrix.os }} # Run the continuous integration workflow on each OS listed in the matrix.
    
    steps:
        # Check-out the repository
      - uses: actions/checkout@v2
        with:
          submodules: 'true' # Also checkout recuresively the submodules

        # Install and setup Alire package manager
      - uses: alire-project/setup-alire@v2
        with:
          version: 2.1.0 # Remove this option to use the default (latest stable release)

      # Set OS environment variable correctly on Windows for WolfSSL
      - run: export OS=Windows
        if: matrix.os == 'windows-latest'

        # Build the project using the validation build profile to enforce static analysis and coding style.
      - run: alr --non-interactive build --validation

        # Run GNATprove to perform automatic formal verification of the SPARK code.
      #- run: alr gnatprove -j0 --level=4

      # Build the client using the validation build profile to enforce static analysis and coding style.
      - run: cd client && alr --non-interactive build --profiles="*=validation"

        # Run GNATprove in the client to perform automatic formal verification of the SPARK code.
      #- run: cd client && alr gnatprove -j0 --level=4

        # Install binary crates needed for testing
      - run: alr --non-interactive install gnatcov bbt

        # Instrument the project code for coverage analysis.
      - run: cd client && alr --non-interactive gnatcov instrument --level=stmt --dump-trigger=atexit --no-subprojects --projects coap_client.gpr,../coap_spark.gpr

        # Build testsuite with instrumented code (first pass, it fails for some reason).
      - run: cd client && GPR_PROJECT_PATH=$HOME/.alire/share/gnatcoverage/gnatcov_rts/ alr --non-interactive build -- --src-subdirs=gnatcov-instr --implicit-with=gnatcov_rts_full -cargs:Ada -gnatec=$HOME/.alire/share/examples/gnatcoverage/support/instrument-spark.adc

      - run: cd client && alr --non-interactive gnatcov instrument --level=stmt --dump-trigger=atexit --projects coap_client.gpr
      - run: cd client && GPR_PROJECT_PATH=$HOME/.alire/share/gnatcoverage/gnatcov_rts/ alr --non-interactive build -- --src-subdirs=gnatcov-instr --implicit-with=gnatcov_rts_full -cargs:Ada -gnatec=$HOME/.alire/share/examples/gnatcoverage/support/instrument-spark.adc

        # Run the instrumented testsuite. This will produce at least one `.srctrace` file for the coverage analysis.
      - run: cd client && PATH=$HOME/.alire/bin:$PATH make -Ctests

        # Run the GNATcov code coverage analysis on the trace files.
      - run: cd client && alr --non-interactive gnatcov coverage --annotate=xcov --output-dir gnatcov_out --level=stmt --projects coap_spark.gpr tests/*.srctrace

        # Upload the code coverage analysis results to codecov.io
      - uses:  mgrojo/gnatcov-to-codecovio-action@main
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false # Don't fail the workflow if codecov.io failed
          verbose: true

