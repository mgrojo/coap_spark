on:                    # Run the workflow for each of the following events:
  push:                # - A branch is pushed or updated.
  pull_request:        # - A pull-request is opened or updated.
  workflow_dispatch:   # - A manual run of the workflow is requested from the GitHub web interface.
  release:
    types: [created]   # - A release is created.

jobs:
  main:
    strategy:
      
      fail-fast: false # Don't stop all the workflows when one of them fails.
    
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest] # List of GitHub Actions platform to run the workflow on
    env:
      # For WolfSSL:
      #  set the value of the environment variable OS to Windows when running on the Windows operating system and to Linux_Or_Mac otherwise
      OS: ${{ matrix.os == 'windows-latest' && 'Windows' || 'Linux_Or_Mac' }}

    runs-on: ${{ matrix.os }} # Run the continuous integration workflow on each OS listed in the matrix.
    
    steps:
        # Check-out the repository
      - uses: actions/checkout@v2
        with:
          submodules: 'true' # Also checkout recursively the submodules

        # Install and setup Alire package manager
      - uses: alire-project/setup-alire@v2
        with:
          version: 2.1.0 # Remove this option to use the default (latest stable release)

        # Build the project using the validation build profile to enforce static analysis and coding style.
      - run: alr --non-interactive build --validation -- -cargs -fprofile-arcs -ftest-coverage -largs -lgcov --coverage -fprofile-arcs

      # Build the client using the validation build profile to enforce static analysis and coding style.
      - run: cd client && alr --non-interactive build --profiles="*=validation" -- -cargs -fprofile-arcs -ftest-coverage -largs -lgcov --coverage -fprofile-arcs

        # Run GNATprove in the client to perform automatic formal verification of the SPARK code.
      #- run: cd client && alr gnatprove -j0 --level=4

        # Install binary crates needed for testing
      - run: alr --non-interactive install gnatcov bbt

        # Run the instrumented testsuite. This will produce *.gcno and *.gcda files for the coverage analysis.
      - run: cd client && PATH=$HOME/.alire/bin:$PATH make -Ctests

        # Run gcov on the library and the client. This will produce *.gcov files.
      - run: alr exec -- gcov -o obj/validation src/*.ad[sb]
      - run: cd client && alr exec -- gcov -o obj/validation src/*.ad[sb]

        # Upload results to codecov.io
      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true # optional (default = false)
          name: codecov-umbrella # optional
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)
