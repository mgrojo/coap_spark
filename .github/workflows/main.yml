name: Build
on:                    # Run the workflow for each of the following events:
  push:                # - A branch is pushed or updated.
    paths-ignore:
      - 'README.md'
  pull_request:        # - A pull-request is opened or updated.
    paths-ignore:
      - 'README.md'
  workflow_dispatch:   # - A manual run of the workflow is requested from the GitHub web interface.
  release:
    types: [created]   # - A release is created.

jobs:
  main:
    strategy:
      
      fail-fast: false # Don't stop all the workflows when one of them fails.
    
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest] # List of GitHub Actions platform to run the workflow on
    env:
      # For WolfSSL:
      #  set the value of the environment variable OS to Windows when running on the Windows operating system and to Linux_Or_Mac otherwise
      OS: ${{ matrix.os == 'windows-latest' && 'Windows' || 'Linux_Or_Mac' }}
      # On Windows, the validation profile fails due to "(style) incorrect line terminator [-gnatyd]"
      PROFILE: ${{ matrix.os == 'windows-latest' && 'development' || 'validation' }}

    runs-on: ${{ matrix.os }} # Run the continuous integration workflow on each OS listed in the matrix.
    
    steps:
        # Check-out the repository
      - uses: actions/checkout@v2
        with:
          submodules: 'true' # Also checkout recursively the submodules

        # Install and setup Alire package manager
      - uses: alire-project/setup-alire@v2
        with:
          version: 2.1.0 # Remove this option to use the default (latest stable release)

        # Build the project using the validation build profile to enforce static analysis and coding style.
      - run: alr --non-interactive build --$PROFILE -- -cargs -fprofile-arcs -ftest-coverage -largs -lgcov --coverage -fprofile-arcs
        shell: bash
        
      # Build the client using the validation build profile to enforce static analysis and coding style.
      - run: cd client && alr --non-interactive build --profiles="*=$PROFILE" -- -cargs -fprofile-arcs -ftest-coverage -largs -lgcov --coverage -fprofile-arcs
        shell: bash

        # Install binary crates needed for testing
      - run: alr --non-interactive install bbt~0.0.6
        shell: bash

        # Run the instrumented testsuite. This will produce *.gcno and *.gcda files for the coverage analysis.

      - name: Library Aunit tests
        run: |
            cd tests
            alr --non-interactive build --$PROFILE -- -cargs -fprofile-arcs -ftest-coverage -largs -lgcov --coverage -fprofile-arcs
            echo "## Aunit test results" >> $GITHUB_STEP_SUMMARY
            NO_COLOR=1 bin/tests >> $GITHUB_STEP_SUMMARY
        shell: bash

        # On Linux we can run all the testsuite, after installing coap-server-openssl from libcoap3-bin package.
      - if: runner.os == 'Linux'
        run: |
            sudo apt install libcoap3-bin 
            PATH=$HOME/.alire/bin:$PATH make -C client/tests
        shell: bash

        # On Windows and macOS we can only run the plain CoAP tests.
      - if: runner.os == 'Windows' || runner.os == 'macOS'
        run: PATH=$HOME/.alire/bin:$PATH make -C client/tests coap_results.md
        shell: bash

      - name: CoAP test results
        run: cat client/tests/coap_results.md >> $GITHUB_STEP_SUMMARY
        shell: bash

      - if: runner.os == 'Linux'
        name: Secure CoAP (coaps) test results
        run: cat client/tests/coaps_results.md >> $GITHUB_STEP_SUMMARY
        shell: bash

        # Run gcov on the library, the tests and the client. This will produce *.gcov files.
      - run: |
          alr exec -- gcov -o obj/$PROFILE src/*.ad[sb]
          cd client && alr exec -- gcov -o obj/$PROFILE src/*.ad[sb]
          cd -
          cd tests  && alr exec -- gcov -o obj/$PROFILE src/*.ad[sb]
        shell: bash

        # Upload results to codecov.io (Linux has the most complete test coverage)
      - uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true # optional (default = false)
          name: codecov-umbrella # optional
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true # optional (default = false)
