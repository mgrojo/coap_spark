------------------------------------------------------------------------------
--                                                                          --
--               Generated by RecordFlux 0.25.0 on 2025-05-01               --
--                                                                          --
--                     Copyright (C) 2018-2025 AdaCore                      --
--                                                                          --
--         SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception          --
--                                                                          --
------------------------------------------------------------------------------

pragma Ada_2012;
pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types;

package RFLX.CoAP with
  SPARK_Mode
is

   type Code_Class is (Request, Success, Client_Error, Server_Error) with
     Size =>
       3;
   for Code_Class use (Request => 0, Success => 2, Client_Error => 4, Server_Error => 5);

   use type RFLX.RFLX_Types.Base_Integer;

   function Valid_Code_Class (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 2 | 4 | 5);

   function To_Base_Integer (Enum : RFLX.CoAP.Code_Class) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Request =>
             0,
          when Success =>
             2,
          when Client_Error =>
             4,
          when Server_Error =>
             5));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Code_Class is
     ((case Val is
          when 0 =>
             Request,
          when 2 =>
             Success,
          when 4 =>
             Client_Error,
          when 5 =>
             Server_Error,
          when others =>
             RFLX.CoAP.Code_Class'Last))
    with
     Pre =>
       Valid_Code_Class (Val);

   pragma Warnings (On, "unreachable branch");

   type Method_Code is (Get, Post, Put, Delete, Fetch, Patch, iPatch) with
     Size =>
       5;
   for Method_Code use (Get => 1, Post => 2, Put => 3, Delete => 4, Fetch => 5, Patch => 6, iPatch => 7);

   function Valid_Method_Code (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 1 | 2 | 3 | 4 | 5 | 6 | 7);

   function To_Base_Integer (Enum : RFLX.CoAP.Method_Code) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Get =>
             1,
          when Post =>
             2,
          when Put =>
             3,
          when Delete =>
             4,
          when Fetch =>
             5,
          when Patch =>
             6,
          when iPatch =>
             7));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Method_Code is
     ((case Val is
          when 1 =>
             Get,
          when 2 =>
             Post,
          when 3 =>
             Put,
          when 4 =>
             Delete,
          when 5 =>
             Fetch,
          when 6 =>
             Patch,
          when 7 =>
             iPatch,
          when others =>
             RFLX.CoAP.Method_Code'Last))
    with
     Pre =>
       Valid_Method_Code (Val);

   pragma Warnings (On, "unreachable branch");

   type Success_Response is (Created, Deleted, Valid, Changed, Content, Continue) with
     Size =>
       5;
   for Success_Response use (Created => 1, Deleted => 2, Valid => 3, Changed => 4, Content => 5, Continue => 31);

   function Valid_Success_Response (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 1 | 2 | 3 | 4 | 5 | 31);

   function To_Base_Integer (Enum : RFLX.CoAP.Success_Response) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Created =>
             1,
          when Deleted =>
             2,
          when Valid =>
             3,
          when Changed =>
             4,
          when Content =>
             5,
          when Continue =>
             31));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Success_Response is
     ((case Val is
          when 1 =>
             Created,
          when 2 =>
             Deleted,
          when 3 =>
             Valid,
          when 4 =>
             Changed,
          when 5 =>
             Content,
          when 31 =>
             Continue,
          when others =>
             RFLX.CoAP.Success_Response'Last))
    with
     Pre =>
       Valid_Success_Response (Val);

   pragma Warnings (On, "unreachable branch");

   type Client_Error_Response is (Bad_Request, Unauthorized, Bad_Option, Forbidden, Not_Found, Method_Not_Allowed, Not_Acceptable, Request_Entity_Incomplete, Conflict, Precondition_Failed, Request_Entity_Too_Large, Unassigned, Unsupported_Content, Unprocessable_Entity, Too_Many_Requests) with
     Size =>
       5;
   for Client_Error_Response use (Bad_Request => 0, Unauthorized => 1, Bad_Option => 2, Forbidden => 3, Not_Found => 4, Method_Not_Allowed => 5, Not_Acceptable => 6, Request_Entity_Incomplete => 8, Conflict => 9, Precondition_Failed => 12, Request_Entity_Too_Large => 13, Unassigned => 14, Unsupported_Content => 15, Unprocessable_Entity => 22, Too_Many_Requests => 29);

   function Valid_Client_Error_Response (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1 | 2 | 3 | 4 | 5 | 6 | 8 | 9 | 12 | 13 | 14 | 15 | 22 | 29);

   function To_Base_Integer (Enum : RFLX.CoAP.Client_Error_Response) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Bad_Request =>
             0,
          when Unauthorized =>
             1,
          when Bad_Option =>
             2,
          when Forbidden =>
             3,
          when Not_Found =>
             4,
          when Method_Not_Allowed =>
             5,
          when Not_Acceptable =>
             6,
          when Request_Entity_Incomplete =>
             8,
          when Conflict =>
             9,
          when Precondition_Failed =>
             12,
          when Request_Entity_Too_Large =>
             13,
          when Unassigned =>
             14,
          when Unsupported_Content =>
             15,
          when Unprocessable_Entity =>
             22,
          when Too_Many_Requests =>
             29));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Client_Error_Response is
     ((case Val is
          when 0 =>
             Bad_Request,
          when 1 =>
             Unauthorized,
          when 2 =>
             Bad_Option,
          when 3 =>
             Forbidden,
          when 4 =>
             Not_Found,
          when 5 =>
             Method_Not_Allowed,
          when 6 =>
             Not_Acceptable,
          when 8 =>
             Request_Entity_Incomplete,
          when 9 =>
             Conflict,
          when 12 =>
             Precondition_Failed,
          when 13 =>
             Request_Entity_Too_Large,
          when 14 =>
             Unassigned,
          when 15 =>
             Unsupported_Content,
          when 22 =>
             Unprocessable_Entity,
          when 29 =>
             Too_Many_Requests,
          when others =>
             RFLX.CoAP.Client_Error_Response'Last))
    with
     Pre =>
       Valid_Client_Error_Response (Val);

   pragma Warnings (On, "unreachable branch");

   type Server_Error_Response is (Internal_Server_Error, Not_Implemented, Bad_Gateway, Service_Unavailable, Gateway_Timeout, Proxying_Not_Supported, Hop) with
     Size =>
       5;
   for Server_Error_Response use (Internal_Server_Error => 0, Not_Implemented => 1, Bad_Gateway => 2, Service_Unavailable => 3, Gateway_Timeout => 4, Proxying_Not_Supported => 5, Hop => 8);

   function Valid_Server_Error_Response (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1 | 2 | 3 | 4 | 5 | 8);

   function To_Base_Integer (Enum : RFLX.CoAP.Server_Error_Response) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Internal_Server_Error =>
             0,
          when Not_Implemented =>
             1,
          when Bad_Gateway =>
             2,
          when Service_Unavailable =>
             3,
          when Gateway_Timeout =>
             4,
          when Proxying_Not_Supported =>
             5,
          when Hop =>
             8));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Server_Error_Response is
     ((case Val is
          when 0 =>
             Internal_Server_Error,
          when 1 =>
             Not_Implemented,
          when 2 =>
             Bad_Gateway,
          when 3 =>
             Service_Unavailable,
          when 4 =>
             Gateway_Timeout,
          when 5 =>
             Proxying_Not_Supported,
          when 8 =>
             Hop,
          when others =>
             RFLX.CoAP.Server_Error_Response'Last))
    with
     Pre =>
       Valid_Server_Error_Response (Val);

   pragma Warnings (On, "unreachable branch");

   type Version_Type is (First_Version) with
     Size =>
       2;
   for Version_Type use (First_Version => 1);

   function Valid_Version_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 1);

   function To_Base_Integer (Enum : RFLX.CoAP.Version_Type) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when First_Version =>
             1));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Version_Type is
     ((case Val is
          when 1 =>
             First_Version,
          when others =>
             RFLX.CoAP.Version_Type'Last))
    with
     Pre =>
       Valid_Version_Type (Val);

   pragma Warnings (On, "unreachable branch");

   type Message_Type is (Confirmable, Non_Confirmable, Acknowledgement, Reset) with
     Size =>
       2;
   for Message_Type use (Confirmable => 0, Non_Confirmable => 1, Acknowledgement => 2, Reset => 3);

   function Valid_Message_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 0 | 1 | 2 | 3);

   function To_Base_Integer (Enum : RFLX.CoAP.Message_Type) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Confirmable =>
             0,
          when Non_Confirmable =>
             1,
          when Acknowledgement =>
             2,
          when Reset =>
             3));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Message_Type is
     ((case Val is
          when 0 =>
             Confirmable,
          when 1 =>
             Non_Confirmable,
          when 2 =>
             Acknowledgement,
          when 3 =>
             Reset,
          when others =>
             RFLX.CoAP.Message_Type'Last))
    with
     Pre =>
       Valid_Message_Type (Val);

   pragma Warnings (On, "unreachable branch");

   type Token_Length is range 0 .. 8 with
     Size =>
       4;

   function Valid_Token_Length (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 8);

   function To_Base_Integer (Val : RFLX.CoAP.Token_Length) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Token_Length is
     (RFLX.CoAP.Token_Length (Val))
    with
     Pre =>
       Valid_Token_Length (Val);

   type Message_ID_Type is range 0 .. 2**16 - 1 with
     Size =>
       16;

   function Valid_Message_ID_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 65535);

   function To_Base_Integer (Val : RFLX.CoAP.Message_ID_Type) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Message_ID_Type is
     (RFLX.CoAP.Message_ID_Type (Val))
    with
     Pre =>
       Valid_Message_ID_Type (Val);

   type Length_16 is range 0 .. 2**16 - 1 with
     Size =>
       16;

   function Valid_Length_16 (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 65535);

   function To_Base_Integer (Val : RFLX.CoAP.Length_16) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Length_16 is
     (RFLX.CoAP.Length_16 (Val))
    with
     Pre =>
       Valid_Length_16 (Val);

   type Option_Base_Type is range 0 .. 2**4 - 1 with
     Size =>
       4;

   function Valid_Option_Base_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 15);

   function To_Base_Integer (Val : RFLX.CoAP.Option_Base_Type) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Option_Base_Type is
     (RFLX.CoAP.Option_Base_Type (Val))
    with
     Pre =>
       Valid_Option_Base_Type (Val);

   type Option_Extended8_Type is range 0 .. 2**8 - 1 with
     Size =>
       8;

   function Valid_Option_Extended8_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 255);

   function To_Base_Integer (Val : RFLX.CoAP.Option_Extended8_Type) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Option_Extended8_Type is
     (RFLX.CoAP.Option_Extended8_Type (Val))
    with
     Pre =>
       Valid_Option_Extended8_Type (Val);

   type Option_Extended16_Type is range 0 .. 2**16 - 1 with
     Size =>
       16;

   function Valid_Option_Extended16_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 65535);

   function To_Base_Integer (Val : RFLX.CoAP.Option_Extended16_Type) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Option_Extended16_Type is
     (RFLX.CoAP.Option_Extended16_Type (Val))
    with
     Pre =>
       Valid_Option_Extended16_Type (Val);

   type Marker_Type is (Payload_Marker) with
     Size =>
       8;
   for Marker_Type use (Payload_Marker => 255);

   function Valid_Marker_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 16#FF#);

   function To_Base_Integer (Enum : RFLX.CoAP.Marker_Type) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when Payload_Marker =>
             16#FF#));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Marker_Type is
     ((case Val is
          when 16#FF# =>
             Payload_Marker,
          when others =>
             RFLX.CoAP.Marker_Type'Last))
    with
     Pre =>
       Valid_Marker_Type (Val);

   pragma Warnings (On, "unreachable branch");

   type Option_Numbers is (If_Match, Uri_Host, ETag, If_None_Match, Observe, Uri_Port, Location_Path, OSCORE, Uri_Path, Content_Format, Max_Age, Uri_Query, Hop_Limit, Accept_17, Q_Block1, Location_Query, EDHOC, Block2, Block1, Size2, Q_Block2, Proxy_Uri, Proxy_Scheme, Size1, Echo, No_Response, Request_Tag, OCF_Accept_Content_Format_Version, OCF_Content_Format_Version, SCP82_Params) with
     Size =>
       16;
   for Option_Numbers use (If_Match => 1, Uri_Host => 3, ETag => 4, If_None_Match => 5, Observe => 6, Uri_Port => 7, Location_Path => 8, OSCORE => 9, Uri_Path => 11, Content_Format => 12, Max_Age => 14, Uri_Query => 15, Hop_Limit => 16, Accept_17 => 17, Q_Block1 => 19, Location_Query => 20, EDHOC => 21, Block2 => 23, Block1 => 27, Size2 => 28, Q_Block2 => 31, Proxy_Uri => 35, Proxy_Scheme => 39, Size1 => 60, Echo => 252, No_Response => 258, Request_Tag => 292, OCF_Accept_Content_Format_Version => 2049, OCF_Content_Format_Version => 2053, SCP82_Params => 2055);

   function Valid_Option_Numbers (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 1 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 11 | 12 | 14 | 15 | 16 | 17 | 19 | 20 | 21 | 23 | 27 | 28 | 31 | 35 | 39 | 60 | 252 | 258 | 292 | 2049 | 2053 | 2055);

   function To_Base_Integer (Enum : RFLX.CoAP.Option_Numbers) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when If_Match =>
             1,
          when Uri_Host =>
             3,
          when ETag =>
             4,
          when If_None_Match =>
             5,
          when Observe =>
             6,
          when Uri_Port =>
             7,
          when Location_Path =>
             8,
          when OSCORE =>
             9,
          when Uri_Path =>
             11,
          when Content_Format =>
             12,
          when Max_Age =>
             14,
          when Uri_Query =>
             15,
          when Hop_Limit =>
             16,
          when Accept_17 =>
             17,
          when Q_Block1 =>
             19,
          when Location_Query =>
             20,
          when EDHOC =>
             21,
          when Block2 =>
             23,
          when Block1 =>
             27,
          when Size2 =>
             28,
          when Q_Block2 =>
             31,
          when Proxy_Uri =>
             35,
          when Proxy_Scheme =>
             39,
          when Size1 =>
             60,
          when Echo =>
             252,
          when No_Response =>
             258,
          when Request_Tag =>
             292,
          when OCF_Accept_Content_Format_Version =>
             2049,
          when OCF_Content_Format_Version =>
             2053,
          when SCP82_Params =>
             2055));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.CoAP.Option_Numbers is
     ((case Val is
          when 1 =>
             If_Match,
          when 3 =>
             Uri_Host,
          when 4 =>
             ETag,
          when 5 =>
             If_None_Match,
          when 6 =>
             Observe,
          when 7 =>
             Uri_Port,
          when 8 =>
             Location_Path,
          when 9 =>
             OSCORE,
          when 11 =>
             Uri_Path,
          when 12 =>
             Content_Format,
          when 14 =>
             Max_Age,
          when 15 =>
             Uri_Query,
          when 16 =>
             Hop_Limit,
          when 17 =>
             Accept_17,
          when 19 =>
             Q_Block1,
          when 20 =>
             Location_Query,
          when 21 =>
             EDHOC,
          when 23 =>
             Block2,
          when 27 =>
             Block1,
          when 28 =>
             Size2,
          when 31 =>
             Q_Block2,
          when 35 =>
             Proxy_Uri,
          when 39 =>
             Proxy_Scheme,
          when 60 =>
             Size1,
          when 252 =>
             Echo,
          when 258 =>
             No_Response,
          when 292 =>
             Request_Tag,
          when 2049 =>
             OCF_Accept_Content_Format_Version,
          when 2053 =>
             OCF_Content_Format_Version,
          when 2055 =>
             SCP82_Params,
          when others =>
             RFLX.CoAP.Option_Numbers'Last))
    with
     Pre =>
       Valid_Option_Numbers (Val);

   pragma Warnings (On, "unreachable branch");

end RFLX.CoAP;
