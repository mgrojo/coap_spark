with CoAP;

package CoAP_Client is

   type Unused_4 is range 0 .. 0 with Size => 4;

   type Token_Data is
      message
         Length : CoAP::Token_Length;
         Unused : Unused_4;
         Token : Opaque
            with Size => Length * 8;
      end message;

   type Options_And_Payload_Data is
      message
         Length : CoAP::Length_16;
         Options_And_Payload : Opaque
            with Size => Length * 8;
      end message;

   generic
      Transport : Channel with Readable, Writable;
      with function Get_Method return CoAP::Method_Code;
      with function Get_New_Message_ID return CoAP::Message_ID_Type;
      with function Get_Random_Token return Token_Data;
      with function Get_Options_And_Payload return Options_And_Payload_Data;
      with function Put_Options_And_Payload (Data : Opaque) return Boolean;
      with function Are_Equal_Tokens (Left : Opaque; Right : Opaque) return Boolean;
      with function Put_Client_Error (Error_Code : CoAP::Client_Error_Response) return Boolean;
      with function Put_Server_Error (Error_Code : CoAP::Server_Error_Response) return Boolean;
   machine Session is
      Request : CoAP::CoAP_Message;
      Response : CoAP::CoAP_Message;
   begin

      state Create_Request is
         Random_Token : Token_Data;
         Method : CoAP::Method_Code;
         Options_And_Payload : Options_And_Payload_Data;
         Messsage_ID : CoAP::Message_ID_Type;
      begin
         Messsage_ID := Get_New_Message_ID;
         Method := Get_Method;
         Random_Token := Get_Random_Token;
         Options_And_Payload := Get_Options_And_Payload;

         Request := CoAP::CoAP_Message'(Ver => CoAP::First_Version,
                     T => CoAP::Non_Confirmable,
                     TKL => Random_Token.Length,
                     Class => CoAP::Request,
                     Method => Method,
                     Message_ID => Messsage_ID,
                     Token => Random_Token.Token,
                     Options_And_Payload => Options_And_Payload.Options_And_Payload);

      transition
         goto Send_Request
      exception
         goto Failure
      end Create_Request;

      state Send_Request is
      begin
         Transport'Write (Request);
      transition
         goto Receive_Response
      end Send_Request;

      state Receive_Response is
      begin
         Transport'Read (Response);
      transition
         goto Success
            if Response'Valid and Are_Equal_Tokens (Response.Token, Request.Token) and Response.Class = CoAP::Success
         goto Treat_Error_Response
            if Response'Valid and Are_Equal_Tokens (Response.Token, Request.Token) and
               (Response.Class = CoAP::Client_Error or Response.Class = CoAP::Server_Error)
         -- Ignore invalid messages and messages with an unexpected Token
         goto Receive_Response
      exception
         goto Failure
      end Receive_Response;

      state Treat_Error_Response is
         OK : Boolean;
      begin
         OK := Put_Options_And_Payload (Response.Options_And_Payload);
      transition
         goto Treat_Client_Error_Response
            if OK and Response.Class = CoAP::Client_Error
         goto Treat_Server_Error_Response
            if OK and Response.Class = CoAP::Server_Error
         goto Failure
      exception
         goto Failure
      end Treat_Error_Response;

      state Treat_Client_Error_Response is
         OK : Boolean;
      begin
         OK := Put_Client_Error(Response.Client_Error_Code);
      transition
         goto null
            if OK
         goto Failure
      exception
         goto Failure
      end Treat_Client_Error_Response;

      state Treat_Server_Error_Response is
         OK : Boolean;
      begin
         OK := Put_Server_Error(Response.Server_Error_Code);
      transition
         goto null
            if OK
         goto Failure
      exception
         goto Failure
      end Treat_Server_Error_Response;

      state Success is
         OK : Boolean;
      begin
         OK := Put_Options_And_Payload (Response.Options_And_Payload);
      transition
         goto null
            if OK
         goto Failure
      exception
         goto Failure
      end Success;

      state Failure is
      begin
      transition
         goto null
      end Failure;
   end Session;

end CoAP_Client;